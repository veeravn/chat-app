services:
  websocket-server:
    build: .
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    environment:
      - PORT=8080
    env_file:
      - .env
    ports:
      - "8081-8083:8080"
    depends_on:
      redis:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    command: ["/bin/bash", "-c", "./start_servers.sh $PORT"]

  load-balancer:
    build: .
    ports:
      - "8080:8080"
    depends_on:
      - websocket-server
    env_file:
      - .env
    command: ["/bin/bash", "-c", "./load_balancer.sh"]

  client:
    build: ./client
    ports:
      - "3000:3000"
    depends_on:
      - load-balancer
    env_file:
      - .env

  cassandra:
    image: cassandra:latest
    container_name: cassandra_db
    ports:
      - "9042:9042"
    environment:
      - CASSANDRA_CLUSTER_NAME=TestCluster
      - CASSANDRA_DC=datacenter1
      - CASSANDRA_RACK=rack1
    healthcheck:
      test: ["CMD-SHELL", "cqlsh -e 'SELECT * from system_schema.tables;' || exit 1"]
      interval: 20s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
     - db-data:/var/lib/cassandra
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
    ports:
      - "6379:6379"

volumes:
  db-data:
